library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decode_stage is
	port (
		clock : in std_logic;
		
		-- Inputs coming from the IF/ID Register
		PC : in integer;
		instruction_in : in INSTRUCTION;
		
		-- Instruction and data coming from the Write-Back stage.
		-- For write_back_instruction
		-- Put the type as std_logic_vector first in order to make unit test for now
		-- Latter after the instruction package is done can make it to other type
		write_back_instruction : in std_logic_vector(5 downto 0) ; 
		write_back_data : in std_logic_vector(63 downto 0);
		
		-- Outputs to the ID/EX Register
		val_a : out std_logic_vector(31 downto 0);
		val_b : out std_logic_vector(31 downto 0);
		i_sign_extended : out std_logic_vector(31 downto 0);
		-- Do I really need PC_out? as well as instruction_out?????
		PC_out : out integer;
		instruction_out : out INSTRUCTION;
		
		-- Need to investgate the hazard more to know where to add the stall and how
		-- For now this is stall_in and stall_out 
		-- stall in is definitly from other stage to tell that the decode stage should be stall
		-- stall out dont know, maybe because it wants to tell other stage (from next instruction) to stall as well????
		-- Need investigate !!!
		stall_in : in std_logic;
		-- Stall signal out.
		stall_out : out std_logic    
	);
end decodeStage ;